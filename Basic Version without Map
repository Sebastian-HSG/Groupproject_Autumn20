'''

0. Prerequisites

The following packages are required and need to be installed before continuing:
- requests (https://requests.readthedocs.io/)
- geopy (https://github.com/geopy/geopy)
- matplotlib (https://matplotlib.org/)
- json (built-in in Python)
- tkinter (built-in in Python)

The following API key is needed:
- OpenWeather (for the current version of this program, the free plan suffices; https://openweathermap.org/api)

'''

# ______________________________________________________________________________________________________________________
# 1. Preparation

# Import libraries
from tkinter import simpledialog
# Requests is needed for http(s) requests
import requests
# json is needed to handle the received data from API
import json
# Tkinter is needed to for the GUI
import tkinter as tk
# geopy is needed to convert a location (string) into coordinates
from geopy.geocoders import Nominatim


# ______________________________________________________________________________________________________________________
# 2. Setup API to fetch data

api_key = "d5f46060a3cb79f7df21271fed87a85a"  # Insert your OpenWeather API key here


# ______________________________________________________________________________________________________________________
# 3. Define functions


# Function 1: Get Current Weather Information
def func1(lat, lon):
    url = f"https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&appid={api_key}&units=metric"
    response1 = requests.get(url)
    data = json.loads(response1.text)

    # Show selected weather data from pulled data.
    current_temp = data["current"]["temp"]
    current_feels_like_temp = data["current"]["feels_like"]
    current_pressure = data["current"]["pressure"]
    current_wind_speed = data["current"]["wind_speed"]
    current_wind_direction = data["current"]["wind_deg"]
    current_weather_description = data["current"]["weather"][0]["description"]

    # Conditional weather data (depending on the current primary weather conditions for the requested locations).
    rain_or_snow_volume = data["current"]["weather"][0]["main"]

    # If the current primary weather condition is snow, get the snow volume.
    if rain_or_snow_volume == "Snow":
        rain_or_snow_volume = data["current"]["snow"]["1h"]
        rain_or_snow_volume = f"\u2744 {rain_or_snow_volume} mm/h"
        rain_or_snow_volume_define = "snow"

    # If the current primary condition is rain, get the rain volume.
    elif rain_or_snow_volume == "Rain":
        rain_or_snow_volume = data["current"]["rain"]["1h"]
        rain_or_snow_volume = f"\u2602 {rain_or_snow_volume} mm/h"
        rain_or_snow_volume_define = "rain"

    # if the current primary weather condition is something other than rain or snow.
    else:
        rain_or_snow_volume = None
        rain_or_snow_volume_define = None

    # Convert the wind direction from degrees to the corresponding abbreviation.
    c = current_wind_direction

    if 338 <= c <= 360:
        c = "N"
    elif 0 <= c <= 22:
        c = "N"
    elif 23 <= c <= 67:
        c = "NE"
    elif 68 <= c <= 112:
        c = "E"
    elif 113 <= c <= 157:
        c = "SE"
    elif 158 <= c <= 202:
        c = "S"
    elif 203 <= c <= 247:
        c = "SW"
    elif 248 <= c <= 292:
        c = "W"
    elif 293 <= c <= 337:
        c = "NW"
    else:
        None

    converted_current_wind_direction = c

    # Convert the wind direction from degrees to the corresponding arrow.
    c = current_wind_direction

    if 338 <= c <= 360:
        c = "\u2191"
    elif 0 <= c <= 22:
        c = "\u2191"
    elif 23 <= c <= 67:
        c = "\u2197"
    elif 68 <= c <= 112:
        c = "\u2192"
    elif 113 <= c <= 157:
        c = "\u2198"
    elif 158 <= c <= 202:
        c = "\u2193"
    elif 203 <= c <= 247:
        c = "\u2199"
    elif 248 <= c <= 292:
        c = "\u2190"
    elif 293 <= c <= 337:
        c = "\u2196"

    converted_current_wind_direction_arrow = c

    return current_temp, current_feels_like_temp, current_pressure, current_wind_speed, current_wind_direction, \
           current_weather_description, rain_or_snow_volume, rain_or_snow_volume_define, \
           converted_current_wind_direction, converted_current_wind_direction_arrow



# Function 2: Get Weather Forecast (Next Hour)
def func2(lat, lon):
    url = f"https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&appid={api_key}&units=metric"
    response3 = requests.get(url)
    data = json.loads(response3.text)

    # Show selection of weather data from all pulled data.
    hourly_temp = data["hourly"][1]["temp"]
    hourly_feels_like_temp = data["hourly"][1]["feels_like"]
    hourly_pressure = data["hourly"][1]["pressure"]
    hourly_wind_speed = data["hourly"][1]["wind_speed"]
    hourly_wind_direction = data["hourly"][1]["wind_deg"]
    hourly_weather_description = data["hourly"][1]["weather"][0]["description"]

    # Conditional weather data (depending on the hourly primary weather conditions for the requested locations).
    hourly_rain_or_snow_volume = data["hourly"][1]["weather"][0]["main"]

    # If the current primary weather condition for the requested location is snow, get the snow volume.
    if hourly_rain_or_snow_volume == "Snow":
        hourly_rain_or_snow_volume = data["hourly"][1]["snow"]["1h"]
        hourly_rain_or_snow_volume = f"\u2744 {hourly_rain_or_snow_volume} mm/h"
        hourly_rain_or_snow_volume_define = "snow"

    # If the current primary condition for the requested location is rain, get the rain volume.
    elif hourly_rain_or_snow_volume == "Rain":
        hourly_rain_or_snow_volume = data["hourly"][1]["rain"]["1h"]
        hourly_rain_or_snow_volume = f"\u2602 {hourly_rain_or_snow_volume} mm/h"
        hourly_rain_or_snow_volume_define = "rain"

    # if the current primary weather condition is something other than rain or snow.
    else:
        hourly_rain_or_snow_volume = None
        hourly_rain_or_snow_volume_define = None

    # Convert the wind direction from degrees to the corresponding abbreviation
    c = hourly_wind_direction
    if 338 <= c <= 360:
        c = "N"
    elif 0 <= c <= 22:
        c = "N"
    elif 23 <= c <= 67:
        c = "NE"
    elif 68 <= c <= 112:
        c = "E"
    elif 113 <= c <= 157:
        c = "SE"
    elif 158 <= c <= 202:
        c = "S"
    elif 203 <= c <= 247:
        c = "SW"
    elif 248 <= c <= 292:
        c = "W"
    elif 293 <= c <= 337:
        c = "NW"

    converted_hourly_wind_direction = c

    # Convert the wind direction from degrees to the corresponding arrow
    c = hourly_wind_direction
    if 338 <= c <= 360:
        c = "\u2191"
    elif 0 <= c <= 22:
        c = "\u2191"
    elif 23 <= c <= 67:
        c = "\u2197"
    elif 68 <= c <= 112:
        c = "\u2192"
    elif 113 <= c <= 157:
        c = "\u2198"
    elif 158 <= c <= 202:
        c = "\u2193"
    elif 203 <= c <= 247:
        c = "\u2199"
    elif 248 <= c <= 292:
        c = "\u2190"
    elif 293 <= c <= 337:
        c = "\u2196"

    converted_hourly_wind_direction_arrow = c

    return hourly_temp, hourly_feels_like_temp, hourly_pressure, hourly_wind_speed, hourly_wind_direction, \
           hourly_weather_description, hourly_rain_or_snow_volume, hourly_rain_or_snow_volume_define, \
           converted_hourly_wind_direction, converted_hourly_wind_direction_arrow

# ______________________________________________________________________________________________________________________
# 4. Ask the user what he wants to do

# Create the first pop-up window that asks the user what they want to do
while True:
    options_window = tk.Tk()
    options_window.withdraw()
    task = simpledialog.askstring(title="Weather Information", prompt="What do you want to do?\n\n"
                                                                      "Get Current Weather Information: 1\n"
                                                                      "Get Weather Forecast (Next Hour): 2\n"
                                                                      "Quit Program: 3")

    if task == '1':
        # Ask the user for input (location of interest)
        coord_window_place = tk.Tk()
        coord_window_place.withdraw()
        place = simpledialog.askstring(title="Get Current Weather Information",
                                       prompt="For which location do you want the current weather?",
                                       initialvalue="City, Country")

        geolocator = Nominatim(user_agent="Weather_APP")
        location = geolocator.geocode(place)
        lat = location.latitude
        lon = location.longitude

        # Call respective function and save the outcome under the variables
        current_temp, current_feels_like_temp, current_pressure, current_wind_speed, current_wind_direction,\
        current_weather_description, rain_or_snow_volume, rain_or_snow_volume_define, converted_current_wind_direction,\
        converted_current_wind_direction_arrow  = func1(lat, lon)

        # The relevant output is printed based on the primary weather condition for the user's requested location:
        # If the current primary weather condition is rain.
        if rain_or_snow_volume_define == "rain":
            answer = tk.messagebox.showinfo(title=f"Current Weather Information {place}",
                                            message=f"{place} \n"
                                                    f"Temperature: {current_temp}°C\n"
                                                    f"Feels Like Temperature: {current_feels_like_temp}°C.\n"
                                                    f"Weather Condition: {current_weather_description}.\n"
                                                    f"{rain_or_snow_volume}\n"
                                                    f"Wind: {current_wind_speed}m/s {converted_current_wind_direction}({converted_current_wind_direction_arrow})\n"
                                                    f"Atmospheric Pressure: {current_pressure}hPa")

        # If the current primary weather condition is snow.
        elif rain_or_snow_volume_define == "snow":
            answer = tk.messagebox.showinfo(title=f"Current Weather Information {place}",
                                            message=f"{place} \n"
                                                    f"Temperature: {current_temp}°C\n"
                                                    f"Feels Like Temperature: {current_feels_like_temp}°C.\n"
                                                    f"Weather Condition: {current_weather_description}.\n"
                                                    f"{rain_or_snow_volume}\n"
                                                    f"Wind: {current_wind_speed}m/s {converted_current_wind_direction}({converted_current_wind_direction_arrow})\n"
                                                    f"Atmospheric Pressure: {current_pressure}hPa")

        # If the current primary weather condition is something else than rain or snow.
        else:
            answer = tk.messagebox.showinfo(title=f"Current Weather Information {place}",
                                            message=f"{place} \n"
                                                    f"Temperature: {current_temp}°C\n"
                                                    f"Feels Like Temperature: {current_feels_like_temp}°C.\n"
                                                    f"Weather Condition: {current_weather_description}.\n"
                                                    f"Wind: {current_wind_speed}m/s {converted_current_wind_direction}({converted_current_wind_direction_arrow})\n"
                                                    f"Atmospheric Pressure: {current_pressure}hPa")

    # If user wants the Weather Forecast (hourly):
    if task == '2':

        # Ask the user for input (location of interest)
        coord_window_place = tk.Tk()
        coord_window_place.withdraw()
        place = simpledialog.askstring(title="Get Weather Forecast (Next Hour)",
                                       prompt="For which location do you want the weather forecast (next hour)?",
                                       initialvalue="City, Country")
        geolocator = Nominatim(user_agent="Weather_APP")
        location = geolocator.geocode(place)
        lat = location.latitude
        lon = location.longitude
        # Call respective function and save the outcome under the variables
        hourly_temp, hourly_feels_like_temp, hourly_pressure, hourly_wind_speed, hourly_wind_direction,\
        hourly_weather_description, hourly_rain_or_snow_volume, hourly_rain_or_snow_volume_define, \
        converted_hourly_wind_direction, converted_hourly_wind_direction_arrow = func2(lat, lon)

        # The relevant output is printed based on the primary weather condition for the user's requested location:
        # If the current primary weather condition is rain.
        if hourly_rain_or_snow_volume_define == "rain":
            answer = tk.messagebox.showinfo(title=f"Weather Forecast (Next Hour) {place}",
                                            message=f"Weather Forecast (Next Hour){place} \n"
                                                    f"Temperature: {hourly_temp}°C\n"
                                                    f"Feels Like Temperature: {hourly_feels_like_temp}°C.\n"
                                                    f"Weather Condition: {hourly_weather_description}.\n"
                                                    f"{hourly_rain_or_snow_volume}\n"
                                                    f"Wind: {hourly_wind_speed}m/s {converted_hourly_wind_direction}({converted_hourly_wind_direction_arrow})\n "
                                                    f"Atmospheric Pressure: {hourly_pressure}hPa")

        # If the current primary weather condition is snow.
        elif hourly_rain_or_snow_volume_define == "snow":
            answer = tk.messagebox.showinfo(title=f"Weather Forecast (Next Hour) {place}",
                                            message=f"Weather Forecast (Next Hour){place} \n"
                                                    f"Temperature: {hourly_temp}°C\n"
                                                    f"Feels Like Temperature: {hourly_feels_like_temp}°C.\n"
                                                    f"Weather Condition: {hourly_weather_description}.\n"
                                                    f"{hourly_rain_or_snow_volume}\n"
                                                    f"Wind: {hourly_wind_speed}m/s {converted_hourly_wind_direction}({converted_hourly_wind_direction_arrow})\n "
                                                    f"Atmospheric Pressure: {hourly_pressure}hPa")

        # If the current primary weather condition is something else than rain or snow.
        else:
            answer = tk.messagebox.showinfo(title=f"Weather Forecast (Next Hour) {place}",
                                            message=f"Weather Forecast (Next Hour) {place} \n"
                                                    f"Temperature: {hourly_temp}°C\n"
                                                    f"Feels Like Temperature: {hourly_feels_like_temp}°C.\n"
                                                    f"Weather Condition: {hourly_weather_description}.\n"
                                                    f"Wind: {hourly_wind_speed}m/s {converted_hourly_wind_direction}({converted_hourly_wind_direction_arrow})\n "
                                                    f"Atmospheric Pressure: {hourly_pressure}hPa")

    # If user wants to exit the program:
    if task == '3':
        exit("The program has ended.")

    # Check for invalid input
    if task != '1' and task != '2' and task != '3':
        answer = tk.messagebox.showerror(title=f"Error", message="Please choose a valid option.")
